<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ty.modules.msg.dao.SmsSendLogDao">
    <select id="getCountDaily" resultType="int">
		select count(1) from ty_sms_send_log
		where mobile = #{mobile}
		<if test="startDate != null">
			AND create_date &gt;= #{startDate}
		</if>
		<if test="endDate != null">
			AND create_date &lt;= #{endDate}
		</if>
	</select>

	<select id="findArrivedSendList" resultType="MsgRecord">
		SELECT
			a.id,
			a.submit_log_id as "messageSubmitLog.id",
			c.id as "customer.id",
			c.reply_url as "customer.replyUrl",
			a.mobile,
			response.src_id AS 'msgResponse.srcId',
			a.ext,
			report.id as 'msgReport.id',
			report.arrived_status as 'msgReport.arrivedStatus',
			report.arrived_time as 'msgReport.arrivedTime'
		FROM  ty_sms_send_record a
		LEFT JOIN ty_customer c on c.id = a.customer_id
		LEFT JOIN ty_sms_send_response response on response.send_record_id = a.id
		LEFT JOIN ty_sms_send_report report on report.msg_id = response.msg_id and report.mobile=a.mobile
		where 1=1 and
			c.reply_way = #{customer.replyWay}
			and c.sdk_type = #{customer.sdkType}
			and report.arrived_status is not null
			and report.arrived_send_status=#{arrivedSendStatus}
			<if test="customer != null and customer.id != null and customer.id != ''">
				and c.id = #{customer.id}
			</if>
		limit 1000;
	</select>

	<sql id="rlColumns">
		a.id,
		a.customer_id AS 'customer.id',
		a.mobile,
		a.content,
		a.status,
		a.ext,
		a.create_date AS 'createDate',
		a.remarks
	</sql>
	<select id="findReplyLogList" resultType="ReplyLog">
		SELECT
		<include refid="rlColumns"/>
		FROM
		ty_sms_send_reply a
		WHERE
		a.del_flag = '0' and a.customer_id = #{customer.id}
		<if test="mobile!=null and mobile!=''">
			AND a.mobile = #{mobile}
		</if>
		<if test="getStatus != null and getStatus != ''">
			and a.get_status = #{getStatus}
		</if>
		order by a.create_date asc
		limit 1000
	</select>

	<update id="batchUpdateGetStatus">
		update ty_sms_send_reply set
		get_status = '1'
		where id IN
		<foreach collection="list" item="replyLog" open="(" close=")" separator=",">
			#{replyLog.id}
		</foreach>
	</update>

	<update id="batchDelete">
		update ty_sms_send_record SET
		del_flag = '1'
		where id IN
		<foreach collection="list" item="msgRecord" open="(" close=")" separator=",">
			#{msgRecord.id}
		</foreach>
	</update>

	<!--<select id="findUnStatusList" resultType="SmsSendLog">
		SELECT
			tunnel_id as "tunnel.id",
			create_date
		FROM `ty_sms_send_log`
		where send_status='1' and arrived_status is null and create_date > #{createDate} group by tunnel_id;
	</select>
-->
	<select id="findCustomerByMsgId" resultType="Customer">
		select
			customer_id as id
		from ty_sms_send_log
		where msg_id = #{msgId}
		limit 1
	</select>
	<insert id="insert">
		insert into ty_sms_send_record(
			id,
			submit_log_id,
			customer_id,
			mobile,
			content,
			content_pay_count,
			refuse_send_message,
			c_src_id,
			ext,
			create_date,
			update_date,
			remarks
		)values(
			#{id},
			#{messageSubmitLog.id},
			#{customer.id},
			#{mobile},
			#{content},
			#{contentPayCount},
			#{refuseSendMessage},
			#{cSrcId},
			#{ext},
			#{createDate},
			#{updateDate},
			#{remarks}
		)

	</insert>

	<insert id="batchInsert"  parameterType="java.lang.StringBuilder">
		${_parameter}
	</insert>

	<update id="updateSmsSendLogResult" >
		UPDATE ty_sms_send_log SET
		msg_id = #{msgId},
		sequence_number = #{sequenceNumber},
		send_status = #{sendStatus},
		send_result_message = #{sendResultMessage},
		update_by = '1',
		update_date = #{updateDate}
		WHERE id = #{id}
	</update>

	<update id="batchUpdateSmsSendLogResult" parameterType="List">
		<foreach collection="list" item="ssl" separator=";">
			UPDATE ty_sms_send_log SET
			msg_id = #{ssl.msgId},
			sequence_number = #{ssl.sequenceNumber},
			send_status = #{ssl.sendStatus},
			send_result_message = #{ssl.sendResultMessage},
			update_by = '1',
			update_date = #{ssl.updateDate}
			WHERE id = #{ssl.id}
		</foreach>
	</update>

	<update id="batchUpdateArrivedSendStatus">
		update ty_sms_send_report set
			arrived_send_status = '1'
		where id IN
		<foreach collection="list" item="smsSendLog" open="(" close=")" separator=",">
			#{smsSendLog.msgReport.id}
		</foreach>
	</update>

	<update id="updateSmsSendLogReceiveResult">
			UPDATE ty_sms_send_log SET
				arrived_status = #{arrivedStatus},
				arrived_result_message = #{arrivedResultMessage},
				arrived_time = #{arrivedTime}
			where msg_id = #{msgId} and mobile = #{mobile}
	</update>

	<update id="batchUpdateSmsSendLogResultX" >
		UPDATE ty_sms_send_log SET
			msg_id = #{msgId},
			src_id = #{srcId},
			sequence_number = #{sequenceNumber},
			send_status = #{sendStatus},
			send_result_message = #{sendResultMessage},
			update_by = '1',
			update_date = #{updateDate},
			remarks= #{remarks}
			WHERE id in
			<foreach collection="ids" item="i" separator="," open="(" close=")">
				#{i}
			</foreach>
	</update>

	<update id="updateSmsSendLogDeliver">
		UPDATE ty_sms_send_log SET
		<if test="arrivedStatus!=null and arrivedStatus!=''">
			arrived_status = #{arrivedStatus},
			arrived_result_message = #{arrivedResultMessage}
		</if>
		<if test="replayContent!=null and replayContent!=''">
			replay_content = #{replayContent},
			replay_date = #{replayDate}
		</if>
		update_by = '1',
		update_date = now()
		WHERE msg_id = #{msgId}
	</update>

	<select id="loadSmsSendLog" resultType="java.lang.String">
		select
			GROUP_CONCAT(concat_ws('#column#',id,ifnull(customerId,'空'),ifnull(specialServiceNumber,'空'),ifnull(serialNumber,'空'),ifnull(companyName,'空'),ifnull(mobile,'空'),ifnull(content,'空'),ifnull(contentPayCount,'空'),ifnull(ext,'空'),ifnull(cSrcId,'空'),ifnull(submitId,'空')
			) separator '#row#')
		from (
			SELECT
				a.id as id,
				customer.id as customerId,
				customer.special_service_number as specialServiceNumber,
				customer.serial_number as serialNumber,
				customer.company_name as companyName,
				a.mobile as mobile,
				a.content as content,
				a.content_pay_count as contentPayCount,
				a.ext as ext,
				a.c_src_id as cSrcId,
				a.submit_log_id AS submitId
			FROM ty_sms_send_record a
			LEFT JOIN ty_customer customer ON customer.id = a.customer_id
			left join ty_sms_send_response response on
			response.add_date = DATE_FORMAT(#{createDate}, '%Y-%m-%d')
			and response.send_record_id = a.id
			left join ty_tunnel tunnel on tunnel.id = response.tunnel_id
			left join ty_sms_send_report report on
			report.add_date in(DATE_FORMAT(#{createDate}, '%Y-%m-%d'),
			DATE_FORMAT(DATE_ADD(#{createDate}, INTERVAL 1 DAY), '%Y-%m-%d'),
			DATE_FORMAT(DATE_ADD(#{createDate}, INTERVAL 2 DAY), '%Y-%m-%d'))
			and report.msg_id = response.msg_id and report.mobile=a.mobile
			WHERE 1=1
			<if test="messageSubmitLog != null and messageSubmitLog.id != null and messageSubmitLog.id != ''">
				AND a.submit_log_id = #{messageSubmitLog.id}
			</if>
			<if test="customer != null">
				<if test="customer.serialNumber != null and customer.serialNumber != ''">
					and customer.serial_number = #{customer.serialNumber}
				</if>
				<if test="customer.specialServiceNumber!=null and customer.specialServiceNumber!='' ">
					AND customer.special_service_number = #{customer.specialServiceNumber}
				</if>
				<if test="customer.companyName != null and customer.companyName != ''">
					and customer.company_name = #{customer.companyName}
				</if>
			</if>
			<if test="isResend != null and isResend != ''">
				and a.is_resend = #{isResend}
			</if>
			<if test="resendId != null and resendId != ''">
				and a.resend_id = #{resendId}
			</if>
			<if test="mobile != null and mobile != ''">
				and a.mobile = #{mobile}
			</if>
			<if test="msgResponse!=null and msgResponse.sendStatus != null and msgResponse.sendStatus != '' and msgResponse.sendStatus != '0'.toString()">
				AND response.send_status = #{msgResponse.sendStatus}
			</if>
			<if test="msgResponse != null and msgResponse.sendStatus=='0'.toString()">
				AND response.send_status is null
			</if>
			<if test="msgReport!=null and msgReport.arrivedStatus!=null and msgReport.arrivedStatus!='' and msgReport.arrivedStatus != '0'.toString()">
				AND report.arrived_status = #{msgReport.arrivedStatus}
			</if>
			<if test="msgReport != null and msgReport.arrivedStatus=='0'.toString()">
				AND report.arrived_status is null
			</if>
			<if test="msgResponse!=null and msgResponse.tunnel != null and msgResponse.tunnel.sequenceNumber != null and msgResponse.tunnel.sequenceNumber != ''">
				AND concat(tunnel.type,tunnel.sequence_number) = #{msgResponse.tunnel.sequenceNumber}
			</if>
			<if test="createDate != null">
				AND a.add_date = DATE_FORMAT(#{createDate}, '%Y-%m-%d')
			</if>
			group by a.id
		)temp
	</select>

	<update id="updateTunnel">
		UPDATE ty_sms_send_log
		SET tunnel_id = #{tunnel.id},
		create_date = now()
		WHERE id = #{id}
	</update>

	<select id="getCustomerIdBySrcId" parameterType="java.lang.String" resultType="MsgRecord" timeout="10">
		SELECT
		a.id, a.customer_id AS 'customer.id', ext,c_src_id
		FROM ty_sms_send_record  a
		LEFT JOIN ty_sms_send_response b on a.id = b.send_record_id
			and b.add_date in(CURDATE(),
			DATE_ADD(CURDATE(), INTERVAL 1 DAY),
			DATE_ADD(CURDATE(), INTERVAL 2 DAY))
		WHERE
		a.add_date in(CURDATE(),
			DATE_ADD(CURDATE(), INTERVAL 1 DAY),
			DATE_ADD(CURDATE(), INTERVAL 2 DAY))
		and b.src_id = #{srcId}
		limit 1
	</select>
</mapper>